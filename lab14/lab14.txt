#include <stdio.h>
#define maxn 7

int main() { // задаем матрицу в одномерном виде
    int matrix[maxn * maxn]; 
    int n;
    int NumCount = 0;
    scanf("%d", &n);
    for (int i = 0; i != n * n; i++) {
        scanf("%d", &matrix[i]);
    }
    int count = 1; // количество возобновлений алгоритма
    int iter = 1; // количество корректировок переменных в текущем возобновлении (динамично)
    int idx1 = 0; // индекс символа для левого столбика (динамичный)
    int idx2 = n * n - n - 1; // индекс символа для правого столбика (динамичный)
    int idx3 = n * n - n + 1; // индекс символа для нижней строки (динамичный)
    int idx4 = n - 2; // индекс символа для верхней строки (динамичный)
    int LeftColumn = n; // количество итераций до else, левого столбика
    int DownLine = n - 1; // количество итераций до else, нижней строки
    int RightColumn = n - 1; // количество итераций до else, правого столбика
    int TopLine = n - 2; // количество итераций до else, верхней строки
    while (1) {
        if (NumCount == n * n) { // конец матрицы
            break;
        }
        if (LeftColumn != 0) { // находим символы левого столбца
            printf("%d ", matrix[idx1]);
            NumCount += 1;
            LeftColumn -= 1;
            idx1 += n;
        }
        else if (DownLine != 0) { // находим символы нижней строки
            printf("%d ", matrix[idx3]);
            NumCount += 1;
            DownLine -= 1;
            idx3 += 1;
        }
        else if (RightColumn != 0) { // находим символы правого столбца
            printf("%d ", matrix[idx2]);
            NumCount += 1;
            RightColumn -= 1;
            idx2 -= n;
        }
        else if (TopLine != 0) { // находим символы верхней строки
            printf("%d ", matrix[idx4]);
            NumCount += 1;
            TopLine -= 1;
            idx4 -= 1;
        }
        else { // первый круг пройден => заходим на следующий, переменным возвращаем исходные значения
            idx1 = 0;
            idx2 = n * n - n - 1;
            idx3 = n * n - n + 1;
            idx4 = n - 2;
            LeftColumn = n;
            DownLine = n - 1;
            RightColumn = n - 1;
            TopLine = n - 2;
            while ((iter != 0) && (iter != n - 2 || n == 3)) { // корректировки переменных
                LeftColumn -= 2;
                idx1 += n + 1;
                RightColumn -= 2;
                idx2 -= n + 1;
                DownLine -= 2;
                idx3 -= n - 1;
                TopLine -= 2;
                idx4 += n - 1;
                iter -= 1;
                count += 1;
            }
            iter += 1 * n; // количество корректировок на следующем возобновлении
        }
    }
    return 0;
}
